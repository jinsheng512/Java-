#### 1. 链表是否有环

##### 1.1 链表是否有环

```
public class Solution{

   public boolean hasCycle( ListNode head ){
   
        ListNode fast = head;
        ListNode slow = head;
        
        while( fast != null && fast.next != null ){
        
               fast = fast.next.next;
               slow = slow.next;
               
               if( fast == slow ){
               
                  return true;
               
               }
        
        
        }
        
        return false;
   
   
   }

}
```

##### 1.2. 两个有序链表合并



```
   public class Solution{
   
        public ListNode mergeList( ListNode l1, ListNode l2){
        
        
              if( l1 == null ){
              
                 return l2;
              }
              
              if( l2 == null ){
              
                 return l1;
              }
              
              if( l1.val < l2.val){
              
               li.next  = mergeList( l1.next,l2);
               
               return l1;
              
              
              }else{
              
              l2.next = mergeList( l1,l2.next);
              retuen l2;
              
              }
        
        }
   
   
   }
```

##### 1.3. 奇偶重排链表

```
public class Solution{

    public ListNode sortList( ListNode head){
    
          ListNode newNode = head.next;
          ListNode odd = head;  // 奇数
          ListNode even = newNode;  //偶数
          
          
          while( even != null && even.next != null){
          
                 odd.next = even.next;
                 odd = odd.next;
                 
                 even.next = odd.next;
                 even = even.next;
          
          }
          
          odd.next = newNode;
          return head;
    
    
    }
    
    

}
```

##### 1.4 反转链表

```
   public class Solution{
   
        public ListNode reverListNode( ListNode head ){
        
                ListNode pre = null;
                ListNode next = null;
                
                while( head != null ){
                
                     next = head.next;
                     head.next = pre;
                     pre = head;
                     head = next;
                
                }
                
                return pre;
        
        } 
   
   
   }
```

##### 1.5 反转指定区间链表

```
public class Solution{

     public ListNode reverseBetween( ListNode head, int n, int m ){
     
     
          ListNode dummy = new ListNode(-1);
          dummy.next = head;
          ListNode pre = dummy;
          
          for( int i = 0 ; i< m ;i++){
          
               pre = pre.next;
          
          }
          
          head = pre.next;
          ListNode next;
          for(int i = n ;i< m;i++){
          
               next = head.next;
               head.next = next.next;
               next.next = pre.next;
               pre.next = next;
           
          }
          
          return dummy.next;
     
     }

}
```

##### 1.6 删除链表重复数字

```
   public class Solution{
   
        public ListNode removeDListNode( ListNode head){
        
              Set<Integer> set = new HashSet<>();
              ListNode cur = head;
              
              while( cur != null && cur.next != null){
                     set.add( cur.val);
                 if(set.containsKey( cur.next.val)){
                 
                      cur.next = cur.next.next;
                      
                 }else{
                 
                      cur = cur.next;
                 }
              
              }
              
              return head;
        
        }
   
   }
```



##### 1.7 从

#### 2. 二叉树

##### 2.1 二叉树的前中后遍历

##### 2.2 二叉树的层序遍历

```
   public class Solution{
   
        public List<list<Integer>> leverOrder( TreeNode root){
        
             List<List<Integer>> res = new ArrayList<List<Integer>>();
             LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
             
             queue.add( root );
             
             while( queue.size() != 0 ){
             
                  List<Integer> temp = new ArrayList<Integer>();
                  
                  for( int i =0 ;i< queue.size() ;i++){
                  
                          TreeNode t = queue.remove();
                          temp.add( t.val );
                          
                          if(t.left != null ){
                          
                             queue.add( t.left)
                             
                          }
                          
                          if(t.right != null ){
                          
                             queue.add( t,right);
                          }
                          
                          
                  
                  }
             
             }
             
        
        }
   
   }
```

2.3

2.4

2.5

