#### 1. 二分法

```
二分法的关键思想是   假设该数组的长度是N那么二分后是N/2，再二分后是N/4……直到二分到1结束（当然这是属于最坏的情况了，即每次找到的那个中点数都不是我们要找的），那么二分的次数就是基本语句执行的次数，于是我们可以设次数为x，N*（1/2）^x=1；则x=logn,底数是2，

二分法的时间复杂度 O（logn），空间复杂度：O(1);


public class Solution{

    public int halfSearch( int[]nums ,int target){
    
           int left = 0 ;
           int right = nums;
           int mid = 0;
           
           while( left < right){
           
              mid = (left + right)/2;
              
              if( target == nums[mid]){
              
                    while( left < right && nums[mid] == nums[mid-1]){
                    
                         mid--
                         return mid;
                    }
                   
              }else if(target > nums[mid]){
              
                  right--;
              
              }else{
              
                  left++;
              }
           
           }
    
               return -1;
    }

}
```

#### 2 冒泡排序

![img](https://images2018.cnblogs.com/blog/576557/201808/576557-20180816163612918-1226938197.png)

```
public class Solution{

     public sdsd


}
```

